const { Telegraf, Markup, Scenes, session } = require('telegraf');
const axios = require('axios');
const db = require('./database/db-pool');
const { createAndShowProfile } = require('./profiles/createAndShowProfile.js');
const { insertOrUpdateGender } = require('./insertOrUpdateGender')
const { insertOrUpdateGenderSearch } = require('./insertOrUpdateGender')
const { insertCityForUser } = require('./city/insertCityForUser');





const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');


function createScenes(bot) {

    const firstQuestionScene = new Scenes.BaseScene('firstQuestion');

    firstQuestionScene.enter(async (ctx) => {
        let text = '–ß—Ç–æ –±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤  üíØ  : ';
        await ctx.reply(text, {
            reply_markup: {
                keyboard: [
                    [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é '}],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });

        await ctx.reply(
            '–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≤–∞—à–∏–º –ø–æ–ª–æ–º ‚öß:',
            Markup.inlineKeyboard([
                Markup.button.callback('–Ø –ø–∞—Ä–µ–Ω—å üë®', 'mann'),
                Markup.button.callback('–Ø –¥–µ–≤—É—à–∫–∞ üë±‚Äç‚ôÄÔ∏è', 'womann'),
            ])
        );
    });


    firstQuestionScene.action('mann', async (ctx) => {
        const userId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        const gender = '–ø–∞—Ä–µ–Ω—å'; // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–∞

        await ctx.answerCbQuery();
        await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–Ø –ø–∞—Ä–µ–Ω—å" üë®');
        await insertOrUpdateGender(userId, gender);

        return ctx.scene.enter('secondQuestion');
    });

    firstQuestionScene.action('womann', async (ctx) => {
        const userId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        const gender = '–¥–µ–≤—É—à–∫–∞'; // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–∞

        await ctx.answerCbQuery();
        await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–Ø –¥–µ–≤—É—à–∫–∞" üë±‚Äç‚ôÄÔ∏è');
        await insertOrUpdateGender(userId, gender);

        return ctx.scene.enter('secondQuestion');
    });

    const secondQuestionScene = new Scenes.BaseScene('secondQuestion');

    secondQuestionScene.enter(async (ctx) => {
        await ctx.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ:  üíï ", Markup.inlineKeyboard([
            [
                Markup.button.callback('–ü–∞—Ä–Ω—è üë®', 'search_mann'),
                Markup.button.callback('–î–µ–≤—É—à–∫—É üë±‚Äç‚ôÄÔ∏è', 'search_womann')
            ],
            [
                Markup.button.callback('–õ—é–±–æ–π –ø–æ–ª üë§', 'any')
            ],
        ]));
    });

    secondQuestionScene.action('search_mann', async (ctx) => {
        const userId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        const gender_to_search = '–ø–∞—Ä–µ–Ω—å'; // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–∞

        await ctx.answerCbQuery();
        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: –ü–∞—Ä–Ω—è üë® `);
        await insertOrUpdateGenderSearch(userId, gender_to_search);

        return ctx.scene.enter('name');
    });

    secondQuestionScene.action('search_womann', async (ctx) => {
        const userId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        const gender_to_search = '–¥–µ–≤—É—à–∫–∞'; // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–∞

        await ctx.answerCbQuery();
        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏:  –î–µ–≤—É—à–∫—É üë±‚Äç‚ôÄ `);
        await insertOrUpdateGenderSearch(userId, gender_to_search);

        return ctx.scene.enter('name');
    });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ—é–±–æ–π –ø–æ–ª üë§"
    secondQuestionScene.action('any', async (ctx) => {
        const userId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        const gender_to_search = '–ª—é–±–æ–π'; // –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–∞


        await ctx.answerCbQuery();
        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: –õ—é–±–æ–π –ø–æ–ª üë§ `);
        await insertOrUpdateGenderSearch(userId, gender_to_search);
        ctx.scene.enter('name'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ü–µ–Ω—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    });

    const nameScene = new Scenes.BaseScene('name');
    nameScene.enter((ctx) => ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:'));

    nameScene.on('text', (ctx) => {
        const name = ctx.message.text.trim(); // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ

        if (!name) {
            ctx.reply('–ü–æ–ª–µ –∏–º–µ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
        } else {
            ctx.session.name = name;
            ctx.scene.enter('surname');
        }
    });


// –°—Ü–µ–Ω–∞ 'surname'
    const surnameScene = new Scenes.BaseScene('surname');
    surnameScene.enter((ctx) => ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:'));

    surnameScene.on('text', (ctx) => {
        const surname = ctx.message.text.trim(); // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ

        if (!surname) {
            ctx.reply('–ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:');
        } else {
            ctx.session.surname = surname;
            ctx.scene.enter('city');
        }
    });

    const cityScene = new Scenes.BaseScene('city');

    const ITEMS_PER_PAGE = 10; // Define how many items you want per page
    cityScene.enter(async (ctx) => {
        await renderCityPage(ctx, 0); // Start page at 0
    });
    async function renderCityPage(ctx, currentPage) {
        try {
            const response = await axios.get('https://api.jsonbin.io/v3/b/66197e90acd3cb34a83768c4');
            const cities = Object.values(response.data.record).map(city => city.name).sort((a, b) => a.localeCompare(b));

            const CHUNK_SIZE = 10; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
            let chunkedCities = [];
            for (let i = 0; i < cities.length; i += CHUNK_SIZE) {
                chunkedCities.push(cities.slice(i, i + CHUNK_SIZE));
            }

            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥: üèô');

            let text = '–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—à –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∏–∑—É üåá\n\n–ò–ª–∏ –≤–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ –±—É–∫–≤—ã –≥–æ—Ä–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter üëá';
            await ctx.reply(text, {
                reply_markup: {
                    keyboard: [
                        [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}],
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.');
        }
    }


    cityScene.action(/^city_select_(.+)$/, async (ctx) => {
        const selectedCity = ctx.match[1];
        const telegramId = ctx.from.id; // –ü–æ–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–ª—è –≤ –ë–î
        try {
            await insertCityForUser(telegramId, selectedCity);
            await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: ${selectedCity}`);
            await ctx.scene.enter('age');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.');
        }
        await ctx.answerCbQuery();
    });


// Function for rendering search results of cities
    async function searchForCity(searchQuery, ctx) {
        try {
            // Fetch cities list from the API
            const response = await axios.get('https://api.jsonbin.io/v3/b/66197e90acd3cb34a83768c4');
            const cities = Object.values(response.data.record);
            const searchResults = cities
                .filter(city => city.name.toLowerCase().includes(searchQuery.toLowerCase()));

            if (!searchResults.length) {
                await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            } else {
                // –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                const cityButtons = searchResults.map((city) =>
                    Markup.button.callback(city.name, `city_select_${city.name}`)
                );

                // –ü–æ–∫–∞–∂–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
                await ctx.reply(
                    '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:',
                    Markup.inlineKeyboard(cityButtons, { columns: 2 })
                );
            }
        } catch (error) {
            console.error('Error while searching for cities:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞.');
        }
    }

// ...cityScene and renderCityPage code...

    cityScene.on('text', async (ctx) => {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥
        const searchQuery = ctx.message.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç.
        await searchForCity(searchQuery, ctx);
    });



// –°—Ü–µ–Ω–∞ 'age'
    const ageScene = new Scenes.BaseScene('age');
    ageScene.enter((ctx) => ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 60 –ª–µ—Ç):'));

    ageScene.on('text', (ctx) => {
        const age = Number(ctx.message.text);

        if (!age) {
            ctx.reply('–ü–æ–ª–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:');
        } else if (isNaN(age)) {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):');
        } else if (age < 18 || age > 60) {
            ctx.reply('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 60 –ª–µ—Ç.');
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–∏ –≥–æ–¥–∞
            if (age - 3 < 18 || age + 3 > 60) {
                ctx.reply('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç ' + age + ' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç ' + (age - 3) + ' –¥–æ ' + (age + 3) + ' –ª–µ—Ç —Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–∏ –≥–æ–¥–∞. –û–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 18 –ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):');
                return;
            }

            ctx.session.age = age;

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
            const minRange = age - 3 < 18 ? 18 : age - 3;
            const maxRange = age + 3 > 60 ? 60 : age + 3;

            ctx.reply('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç ' + age + ' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–∏–æ–¥–µ –æ—Ç ' + minRange + ' –¥–æ ' + maxRange + ' –ª–µ—Ç —Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–∏ –≥–æ–¥–∞.');

            return ctx.scene.enter('info');
        }
    });

// –°—Ü–µ–Ω–∞ 'info'
    const infoScene = new Scenes.BaseScene('info');

    infoScene.enter((ctx) => {
        ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: üò®');
    });

    infoScene.on('text', (ctx) => {
        const info = ctx.message.text.trim(); // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ

        if (!info) {
            ctx.reply('–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:');
        } else {
            ctx.session.info = info;
            ctx.scene.enter('search');
        }
    });

// –°—Ü–µ–Ω–∞ 'search'
    const searchScene = new Scenes.BaseScene('search');
    searchScene.enter((ctx) => {
        ctx.reply('–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∫–æ–≥–æ –∏–ª–∏ —á—Ç–æ –≤—ã –∏—â–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n‚úÖ –¥—Ä—É–≥–∞,\n\n‚úÖ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –≤–µ—á–µ—Ä,\n\n‚úÖ –æ—Ç–Ω–æ—à–µ–Ω–∏—è,\n\n‚úÖ –∞–Ω–∏–º–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã,\n\n‚úÖ –¥—Ä—É–≥–∞ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ,\n\n‚úÖ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã,\n\n‚úÖ Netflix,\n\n‚úÖ –°–ø–æ—Ä—Ç,\n\n‚úÖ –ö–ª—É–±—ã –∏ –±–∞—Ä—ã,\n\n‚úÖ –î—Ä—É–≥–æ–µ –∏ —Ç.–¥');
    });

    searchScene.on('text', (ctx) => {
        const search = ctx.message.text.trim(); // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ

        if (!search) {
            ctx.reply('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –∏–ª–∏ —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ.');
        } else {
            ctx.session.search = search;
            ctx.scene.enter('goal');
        }
    });

    const goalScene = new Scenes.BaseScene('goal');
    goalScene.enter((ctx) => {
        ctx.reply('‚òÄÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–µ –±—ã –Ω–∞–π—Ç–∏: ');
    });

    goalScene.on('text', (ctx) => {
        const goal = ctx.message.text.trim(); // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ

        if (!goal) {
            ctx.reply('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.');
        } else {
            ctx.session.goal = goal;
            ctx.scene.enter('media');
        }
    });


    const mediaScene = new Scenes.BaseScene('media');


    mediaScene.enter((ctx) => {


        ctx.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ üñº –∏–ª–∏ –≤–∏–¥–µ–æ üé• (mp4) \n \n –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 5 –ú–ë ' +
            '\n –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 50 –ú–ë' +
            '\n \n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è \n \n  –ï—Å–ª–∏ –≤—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (—Ç.–µ. –Ω–µ –≤–∞—à–µ —Ñ–æ—Ç–æ), –≤—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç–µ –≤ —á–µ—Ä–Ω—ã–π –±–∞–Ω üö´ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. \n \n –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è' +
            '\n \n –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' +
            '\n' +
            '‚öß –°–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é \n' +
            '\n' +
            '‚öß –ê–Ω–∏–º–µ –∫–∞—Ä—Ç–∏–Ω–∫—É\n' +
            '\n' +
            '‚öß –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç—É –ª–∏—Ü –ª—é–¥–µ–π\n' +
            '\n' +
            '‚öß –ú–µ–º–∞—Å–∏–∫–∏\n' +
            '\n' +
            '‚öß –û—Ç—Ä—ã–≤–∫–∏ –∏–∑ —Ñ–∏–ª—å–º–æ–≤\n' +
            '\n' +
            '‚öß –ú–µ–º-–≤–∏–¥–µ–æ\n' +
            '\n' +
            '‚öß –í–∞—à–µ Tik-Tok –≤–∏–¥–µ–æ (mp4)\n' +
            '\n' +
            '‚öß –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã');
    });

    mediaScene.on(['photo', 'video'], async (ctx) => {

        const MAX_VIDEO_SIZE = 50 * 1024 * 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ (50 MB)
        const MAX_PHOTO_SIZE = 5 * 1024 * 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ (5 –ú–ë)

        const fileId = ctx.message.video ? ctx.message.video.file_id : ctx.message.photo[ctx.message.photo.length - 1].file_id;
        const fileSize = ctx.message.video ? ctx.message.video.file_size : ctx.message.photo[ctx.message.photo.length - 1].file_size;


        const validVideoExtensions = ['mp4'];
        const validPhotoExtensions = ['jpg', 'jpeg', 'png', 'gif'];

        const isVideo = !!ctx.message.video; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
        const isPhoto = !!ctx.message.photo; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ç–æ

        const fileType = isVideo ? 'video' : 'photo';


        if (isVideo) {
            const extension = fileExtension(fileId);
            if (extension && !validVideoExtensions.includes(extension.toLowerCase())) {
                ctx.reply('–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MP4.');
                return;
            }
        } else if (isPhoto) {
            const extension = fileExtension(fileId);
            if (extension && !validPhotoExtensions.includes(extension.toLowerCase())) {
                ctx.reply('–§–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JPG, JPEG, PNG –∏–ª–∏ GIF.');
                return;
            }
        }


        console.log('MAX_VIDEO_SIZE –≤ –±–∞–π—Ç–∞—Ö:', MAX_VIDEO_SIZE);
        console.log('MAX_PHOTO_SIZE –≤ –±–∞–π—Ç–∞—Ö:', MAX_PHOTO_SIZE);
        console.log('–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö:', fileSize);
        console.log('–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', fileSize);

        let errorMessage = null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç
        if (fileSize > MAX_PHOTO_SIZE && fileType === 'photo') {
            errorMessage = '\n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö† \n \n  –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 5 –ú–ë \n \n –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è';
        }
        if (fileSize > MAX_PHOTO_SIZE && fileType === 'video') {
            errorMessage = '\n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö† \n \n  –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –Ω–µ –±–æ–ª—å—à–µ 50 –ú–ë \n \n  –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è';
        }
        if (ctx.session.uploadedFile) {
            ctx.reply('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.');
            return;
        }


        if (errorMessage) {
            ctx.reply(errorMessage);
            await ctx.scene.reenter(); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
            // –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const file = await ctx.telegram.getFile(fileId);
            const url = `https://api.telegram.org/file/6538687089:AAFc5JkevqmFzQNAFt9nSS7iJN68kig_iYQ/${file.file_path}`;
            const response = await fetch(url);
            const buffer = await response.buffer();
            const savedPath = path.join(__dirname, 'downloads', fileId);
            fs.writeFileSync(savedPath, buffer);

            await createAndShowProfile(ctx, fileId, fileType, savedPath, ctx.session);

        }
    });

    const Stage = new Scenes.Stage([
        firstQuestionScene,
        secondQuestionScene,
        nameScene,
        surnameScene,
        cityScene,
        ageScene,
        infoScene,
        searchScene,
        goalScene,
        mediaScene,
    ]);

    bot.use(Stage.middleware());
    return Stage;


}
function checkUploadedFiles(ctx) {
    if (!ctx.session.uploadedFiles) {
        ctx.session.uploadedFiles = [];
    }

    if (ctx.session.uploadedFiles.length > 0) {
        ctx.reply('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.');
        return true;
    }
    return false;
}

const fileExtension = (fileId) => {
    const parts = fileId.split('.');
    if (parts.length > 1) {
        return parts[parts.length - 1].toLowerCase();
    }
    return null;
};

module.exports = {
    createScenes,

};