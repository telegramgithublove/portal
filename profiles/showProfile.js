const db = require('../database/db-pool');
const { Telegraf, Markup, Scenes, session } = require('telegraf');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Å BigInt
const safeStringify = (obj) => {
    return JSON.stringify(obj, (key, value) =>
        typeof value === 'bigint'
            ? value.toString()
            : value
    );
};

const showProfile = async (ctx) => {
    let conn;
    try {
        const userId = ctx.from.id;
        console.log('–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

        if (!userId) {
            console.error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        conn = await db.getConnection();
        
        console.log('–í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            username: ctx.from.username,
            telegram_id: userId
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [result] = await conn.execute(
            'SELECT * FROM users WHERE telegram_id = ?', 
            [userId]
        );
        
        console.log('–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', typeof result);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', safeStringify(result));

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤
        const rows = Array.isArray(result) ? result : [result];
        
        if (!rows || rows.length === 0) {
            console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            await ctx.reply('‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É!', {
                reply_markup: {
                    keyboard: [
                        ['–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É ‚úçÔ∏è'],
                        ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ],
                    resize_keyboard: true
                }
            });
            return;
        }

        const user = rows[0];
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', safeStringify(user));

        if (!user || typeof user !== 'object') {
            console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const userData = {
            name: user.name?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            surname: user.surname?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            city: user.city?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            age: user.age?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            info: user.info?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            gender: user.gender?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            gendersearch: user.gendersearch?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            search: user.search?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            goal: user.goal?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            fileId: user.fileId || null,
            fileType: user.fileType || null,
            filePath: user.filePath || null
        };

        console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', safeStringify(userData));

        const caption = `üë§ –í–ê–®–ê –ê–ù–ö–ï–¢–ê:\n\n` +
            `üë§ –ò–º—è: ${userData.name}\n` +
            `üë• –§–∞–º–∏–ª–∏—è: ${userData.surname}\n` +
            `üåé –ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞: ${userData.city}\n` +
            `üìì –í–æ–∑—Ä–∞—Å—Ç: ${userData.age}\n` +
            `üì¨ –û —Å–µ–±–µ: ${userData.info}\n` +
            `üîç –Ø: ${userData.gender}\n` +
            `üîç –ò—â—É: ${userData.gendersearch}\n` +
            `‚òÄ –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${userData.search}\n` +
            `üíï –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: ${userData.goal}`;

        const replyMarkup = {
            keyboard: [
                [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
        if (userData.fileId) {
            try {
                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:', { 
                    fileId: userData.fileId, 
                    fileType: userData.fileType 
                });
                
                const effectiveFileType = userData.fileType || 
                    (userData.filePath && (
                        userData.filePath.toLowerCase().endsWith('.jpg') || 
                        userData.filePath.toLowerCase().endsWith('.jpeg') || 
                        userData.filePath.toLowerCase().endsWith('.png')
                    )) ? 'photo' : 'video';
                
                console.log('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', effectiveFileType);

                try {
                    if (effectiveFileType === 'photo') {
                        await ctx.replyWithPhoto(userData.fileId, { 
                            caption,
                            parse_mode: 'HTML',
                            reply_markup: replyMarkup
                        });
                    } else if (effectiveFileType === 'video') {
                        await ctx.replyWithVideo(userData.fileId, { 
                            caption,
                            parse_mode: 'HTML',
                            reply_markup: replyMarkup
                        });
                    } else {
                        console.log('–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç');
                        await ctx.replyWithDocument(userData.fileId, {
                            caption,
                            parse_mode: 'HTML',
                            reply_markup: replyMarkup
                        });
                    }
                } catch (sendError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç:', sendError);
                    await ctx.replyWithDocument(userData.fileId, {
                        caption,
                        parse_mode: 'HTML',
                        reply_markup: replyMarkup
                    });
                }
            } catch (mediaError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞:', mediaError);
                await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.');
                await ctx.reply(caption, {
                    parse_mode: 'HTML',
                    reply_markup: replyMarkup
                });
            }
        } else {
            await ctx.reply(caption, {
                parse_mode: 'HTML',
                reply_markup: replyMarkup
            });
        }

        // –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        const keyboard = [
            [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù', callback_data: 'fill_form' }],
            [{ text: '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üíé', callback_data: 'search' }]
        ];

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.', {
            reply_markup: {
                keyboard: [
                    ['–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É ‚úçÔ∏è'],
                    ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ],
                resize_keyboard: true
            }
        });
    } finally {
        if (conn) {
            try {
                await conn.release();
                console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
            }
        }
    }
};

module.exports = {
    showProfile
};